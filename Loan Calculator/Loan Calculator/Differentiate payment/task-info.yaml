type: edu
custom_name: stage4
files:
- name: creditcalc/creditcalc.py
  visible: true
  text: "import math\n\n# methods\ndef number_months():\n    print(\"Enter the loan\
    \ principal:\") \n    loan = int(input())\n    print(\"Enter the montly payment:\"\
    )\n    monthly = int(input())\n    print(\"Enter the load interest:\")\n    interest\
    \ = float(input())\n    nomial_interest = interest / 1200    \n    number_months\
    \ = math.ceil(math.log(monthly / (monthly - (nomial_interest * loan)) , 1 + nomial_interest))\n\
    \    years = number_months // 12\n    months = number_months % 12\n    if (years\
    \ > 0) and (months > 0):\n        print(f\"It will take {years} years and {months}\
    \ months to repay this loan!\")\n    elif years == 0:\n        print(f\"It will\
    \ take {months} months to repay this loan!\")\n    else:\n        print(f\"It\
    \ will take {years} years to repay this loan!\")\n        \n        \ndef annuity_payments():\n\
    \    print(\"Enter the loan principal:\")\n    loan = int(input())\n    print(\"\
    Enter the number of periods:\")\n    period = int(input())\n    print(\"enter\
    \ the loan interest:\")\n    interest = float(input())   \n    \n    print(f\"\
    Your monthly payment = {calc_annuity(loan, interest, period)}\")\n    \ndef loan_principle():\n\
    \    print(\"Enter the annuity payment:\")\n    annuity = float(input())\n   \
    \ print(\"Enter the number of periods:\")\n    period = int(input())\n    print(\"\
    Enter your loan interest:\")\n    interest = float(input())    \n    \n    print(f\"\
    Your loan principal = {calc_loan(annuity, interest, period)}\")\n    \n\ndef calc_nomial(interest):\n\
    \    return interest / 1200\n    \ndef calc_body(interest, period):\n    nomial_interest\
    \ = calc_nomial(interest)\n    return (nomial_interest * math.pow(1 + nomial_interest,\
    \ period)) / (math.pow(1 + nomial_interest, period) - 1)\n    \ndef calc_annuity(loan,\
    \ interest, period):\n    return math.ceil(loan * calc_body(interest, period))\n\
    \    \ndef calc_loan(annuity, interest, period):\n    return annuity / calc_body(interest,\
    \ period)\n    \n         \n        \n    \n# program\nprint('''What do you want\
    \ to calculate?\ntype \"n\" for number of monthly payments,\ntype \"a\" for annuity\
    \ monthly payment amount,\ntype \"p\" for loan principal:''')\n\ni = input()\n\
    \nif i == \"n\":\n    number_months()\nelif i == \"a\":\n    annuity_payments()\n\
    elif i == \"p\":\n    loan_principle()\n    \n    \n\n\n\n\n# write your code\
    \ here\n# print(\"Enter the loan principal:\")\n# p = int(input())\n# print('''What\
    \ do you want to calculate?\n# type \"m\" for number of monthly payments,\n# type\
    \ \"p\" for the monthly payment:''')\n# i = input()\n\n# if i == \"m\":\n#   \
    \  print(\"Enter the monthly payment:\")\n#     x = int(input())\n#     answer\
    \ = p // x if p % x == 0 else p // x + 1\n#     print(\"It will take\", answer,\
    \ \"month\" if answer == 1 else \"months\", \"to repay the loan\")\n# elif i ==\
    \ \"p\":\n#     print(\"Enter the number of months:\")\n#     x = int(input())\n\
    #     if p % x == 0:\n#         print(\"Your monthly payment =\", p // x, \"and\
    \ the last payment =\", p // x)\n#     else:\n#         print(\"Your monthly payment\
    \ =\", p // x + 1, \"and the last payment =\", p % (p // x + 1))\n    \n\n\n"
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class LoanCalcTest(StageTest):
        def generate(self):
            return [
                TestCase(
                    args=[
                        '--type=annuity',
                        '--payment=8722',
                        '--periods=120',
                        '--interest=5.6',
                    ],
                    attach=('principal', 800018, 246622),
                ),
                TestCase(
                    args=[
                        '--type=annuity',
                        '--payment=6898',
                        '--periods=240',
                        '--interest=3.4',
                    ],
                    attach=('principal', 1199997, 455523),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--periods=8',
                        '--interest=9.8',
                    ],
                    attach=('payment', 129638, 37104),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--periods=60',
                        '--interest=10',
                    ],
                    attach=('payment', 274880, 21248),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=500000',
                        '--payment=23000',
                        '--interest=7.8',
                    ],
                    attach=('periods', 52000, 24),
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=1000000',
                        '--periods=10',
                        '--interest=10',
                    ],
                    attach=[
                        108334,
                        107500,
                        106667,
                        105834,
                        105000,
                        104167,
                        103334,
                        102500,
                        101667,
                        100834,
                        45837,
                    ],
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=500000',
                        '--periods=8',
                        '--interest=7.8',
                    ],
                    attach=[
                        65750,
                        65344,
                        64938,
                        64532,
                        64125,
                        63719,
                        63313,
                        62907,
                        14628,
                    ],
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--payment=104000',
                    ],
                    attach='Incorrect',
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=-1000000',
                        '--payment=104000',
                        '--periods=8',
                    ],
                    attach='Incorrect',
                ),

            ]

        def check(self, reply, attach):
            if attach == 'Incorrect':
                if attach.lower() in reply.lower():
                    return CheckResult.correct()

                return CheckResult.wrong(
                    'Parameters are incorrect. '
                    'Just output "Incorrect parameters"'
                )

            numbers = re.findall(r'[-+]?(\d*\.\d+|\d+)', reply)
            if len(numbers) == 0:
                return CheckResult.wrong(
                    'No numbers in the answer',
                )

            if isinstance(attach, tuple):
                if attach[0] == 'periods':
                    years = int(attach[2] / 12)
                    months = str(int(attach[2] % 12))
                    for i in numbers:
                        if abs(attach[1] - float(i)) < 2:
                            if str(months) in numbers or str(years) in numbers:
                                return CheckResult.correct()

                    if years == 0:
                        output = (
                            'Looks like your periods '
                            'calculations aren\'t working properly. '
                            'Correct months and overpayment are '
                            '[ {0}, {1} ]'
                            ', but you output: {2}'
                        )
                        return CheckResult.wrong(
                            output.format(attach[2], attach[1], numbers),
                        )
                    else:
                        if months != '0':
                            output = (
                                'Looks like your periods '
                                'calculations aren\'t working properly. '
                                'Correct years, months and overpayment are '
                                '[ {0}, {1}, {2} ]'
                                ', but you output: {3}'
                            )
                            return CheckResult.wrong(
                                output.format(years, months, attach[1], numbers),
                            )
                        else:
                            output = (
                                'Looks like your periods '
                                'calculations aren\'t working properly. '
                                'Correct years and overpayment are '
                                '[ {0}, {1} ]'
                                ', but you output: {2}'
                            )
                            return CheckResult.wrong(
                                output.format(years, attach[1], numbers),
                            )
                for i in numbers:
                    if not abs(attach[1] - float(i)) < 2:
                        if not abs(attach[2] - float(i)) < 2:
                            if attach[0] == 'payment':
                                output = (
                                    'Looks like your annuity payments '
                                    'calculations aren\'t working properly. '
                                    'Correct annuity payment and overpayment are '
                                    '[ {0}, {1} ]'
                                    ', but you output: {2}'
                                )
                            else:
                                output = (
                                    'Looks like your loan principal '
                                    'calculations aren\'t working properly. '
                                    'Correct loan principal and overpayment are '
                                    '[ {0}, {1} ]'
                                    ', but you output: {2}'
                                )
                            return CheckResult.wrong(
                                output.format(attach[2], attach[1], numbers),
                            )

                return CheckResult.correct()

            if isinstance(attach, list):
                if (len(numbers) + 1) / 2 < len(attach):
                    user_numbers = numbers[1::2]
                    if numbers[-1] not in user_numbers:
                        user_numbers.append(numbers[-1])
                    return CheckResult.wrong(
                        'Not enough values for diff payment in the answer '
                        'must be {0} with overpayment {1}, but you output: {2}'
                        .format(attach[:-1], attach[-1], user_numbers)
                    )

                for figure in attach:
                    flag = False
                    for number in numbers:
                        if abs(float(number) - figure) < 2:
                            flag = True
                            break
                    if flag is False:
                        user_numbers = numbers[1::2]
                        if numbers[-1] not in user_numbers:
                            user_numbers.append(numbers[-1])
                        return CheckResult.wrong(
                            'Incorrect result '
                            'must be {0} with overpayment {1}, but you output: {2}'
                            .format(attach[:-1], attach[-1], user_numbers)
                        )

            return CheckResult.correct()


    if __name__ == '__main__':
        LoanCalcTest('creditcalc.creditcalc').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/90/stages/503/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 29 Jan 2021 11:04:02 UTC
record: 4
